{"version":3,"sources":["initialize.js","locations.js","map.js","sideview.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClfile":"../seahouse.js","sourcesContent":["var Visualisation, pairgen;\n\nVisualisation = (function() {\n  function Visualisation(line_plot_elem_id, map_elem_id, title_id) {\n    this.line_plot_elem_id = line_plot_elem_id;\n    this.map_elem_id = map_elem_id;\n    this.title_id = title_id;\n    this.line_plotter = new LinePlotter(\"#\" + this.line_plot_elem_id);\n    this.sealevel_map = new SealevelMap(this.map_elem_id);\n    this.mouse_icon = L.divIcon({\n      iconSize: [5, 5],\n      className: 'mouse-loc-icon'\n    });\n    this.mouse_marker = L.marker([0, 0], {\n      icon: this.mouse_icon,\n      clickable: false,\n      zIndex: 1000\n    }).addTo(this.sealevel_map.map);\n    this.latitude = 0;\n    this.line_plotter.mouseoverlay.on(\"mousemove\", (function(_this) {\n      return function() {\n        var degrees, mouse_pos, x;\n        mouse_pos = d3.mouse(d3.event.target);\n        x = _this.line_plotter.xScaleFocus.invert(mouse_pos[0]);\n        degrees = _this.line_plotter.convertToDegrees(x);\n        _this.mouse_marker.setLatLng([_this.latitude, degrees[0]]);\n        return _this.mouse_marker.update();\n      };\n    })(this));\n  }\n\n  Visualisation.prototype.loadMarkers = function() {\n    return Location.loadLocations((function(_this) {\n      return function(loc) {\n        return _this.sealevel_map.addLocation(loc, function(e, src, test) {\n          return _this.loadLocation($(e.target).data('slug'));\n        });\n      };\n    })(this));\n  };\n\n  Visualisation.prototype.loadLocation = function(slug) {\n    return $.when($.ajax({\n      url: \"/data/\" + slug + \"/dataset.json\"\n    }), $.ajax({\n      url: \"/data/\" + slug + \"/metadata.json\"\n    })).then((function(_this) {\n      return function(data, metadata) {\n        _this.line_plotter.plot(data[0], metadata[0]);\n        _this.sealevel_map.setCutLayer(metadata[0]);\n        _this.latitude = metadata[0].geometry.coordinates[0][1];\n        return $('#' + _this.title_id).text(\"Elevation profile through \" + metadata[0].properties.name);\n      };\n    })(this));\n  };\n\n  return Visualisation;\n\n})();\n\n$(document).ready(function() {\n  var vis;\n  vis = new Visualisation('chart', 'map', 'title');\n  vis.loadMarkers();\n  return vis.loadLocation('amsterdam');\n});\n\npairgen = function(begin, end, baseL, projL) {\n  var a;\n  a = [\n    {\n      x: begin,\n      base: baseL,\n      proj: projL\n    }\n  ];\n  a.push({\n    x: end,\n    base: baseL,\n    proj: projL\n  });\n  return a;\n};\n","var Location;\n\nLocation = (function() {\n  function Location(name, slug1, coordinates) {\n    this.name = name;\n    this.slug = slug1;\n    this.coordinates = coordinates;\n  }\n\n  Location.loadLocations = function(handler) {\n    var locations;\n    locations = [];\n    return $.ajax('/data/locations.json').done(function(data, status, xhr) {\n      var loc, obj, results, slug;\n      results = [];\n      for (slug in data) {\n        loc = data[slug];\n        obj = new Location(loc.properties.name, loc.properties.slug, [loc.properties.location[1], loc.properties.location[0]]);\n        results.push(handler(obj));\n      }\n      return results;\n    });\n  };\n\n  return Location;\n\n})();\n","var SealevelMap;\n\nSealevelMap = (function() {\n  function SealevelMap(element) {\n    this.map = L.map(element);\n    L.tileLayer('//{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n    }).addTo(this.map);\n    L.tileLayer.wms('//geodata.nationaalgeoregister.nl/ahn2/wms', {\n      layers: 'ahn2_5m',\n      format: 'image/png',\n      transparent: true,\n      opacity: 0.5,\n      attribution: 'AHN2: CC-BY Kadaster'\n    }).addTo(this.map);\n    this.map.setView([52.1561110, 5.3878270], 7);\n    this.cut_layer = void 0;\n  }\n\n  SealevelMap.prototype.addLocation = function(loc, on_click_handler) {\n    var load_btn, marker, p;\n    marker = L.marker(loc.coordinates, {\n      zIndexOffset: 500\n    }).addTo(this.map);\n    load_btn = $(document.createElement('button'));\n    load_btn.addClass('btn btn-xs btn-success');\n    load_btn.append(document.createTextNode('Load location'));\n    load_btn.data({\n      name: loc.name,\n      slug: loc.slug,\n      coordinates: loc.coordinates\n    });\n    $(load_btn).on('click', on_click_handler);\n    p = $(document.createElement('p'));\n    p.append($(document.createTextNode(loc.name + \" - \")));\n    p.append(load_btn);\n    marker.bindPopup(p.get(0));\n  };\n\n  SealevelMap.prototype.setCutLayer = function(geoJson) {\n    if (this.cut_layer != null) {\n      this.map.removeLayer(this.cut_layer);\n    }\n    this.cut_layer = L.geoJson(geoJson);\n    return this.cut_layer.addTo(this.map);\n  };\n\n  return SealevelMap;\n\n})();\n","var LinePlotter, range,\n  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\nLinePlotter = (function() {\n  function LinePlotter(selector) {\n    this.selector = selector;\n    this.brushed = bind(this.brushed, this);\n    this.img = $(this.selector);\n    this.svg = d3.select(this.selector).append(\"svg\");\n    this.svg.append(\"defs\").append(\"clipPath\").attr(\"id\", \"clip\").append(\"rect\");\n    this.projection = d3.geo.mercator();\n    this.padding = {\n      top: 0,\n      left: 60,\n      bottom: 30,\n      right: 10\n    };\n    this.padding2 = {\n      top: 250,\n      left: this.padding.left,\n      bottom: this.padding.bottom,\n      right: this.padding.right\n    };\n    this.focus = this.svg.append(\"g\").attr(\"id\", \"focus\").attr(\"transform\", \"translate(\" + this.padding.left + \",\" + this.padding.top + \")\");\n    this.focus.append(\"g\").attr(\"class\", \"y axis\");\n    this.focus.append(\"g\").attr(\"class\", \"x axis\");\n    this.focus.append(\"text\").attr(\"class\", \"axis\").attr(\"x\", -this.padding.left).attr(\"y\", (this.padding2.top - this.padding.bottom) / 2).attr(\"text-anchor\", \"right\").text(\"NAP\");\n    this.waterFocus = this.focus.append(\"g\").attr(\"class\", \"water\");\n    this.focus.append(\"g\").attr(\"class\", \"land\").append(\"path\").attr(\"id\", \"focus-land-path\").attr(\"clip-path\", \"url(#clip)\");\n    this.context = this.svg.append(\"g\").attr(\"id\", \"context\").attr(\"transform\", \"translate(\" + this.padding2.left + \", \" + this.padding2.top + \")\");\n    this.context.append(\"g\").attr(\"class\", \"x axis\");\n    this.waterContext = this.context.append(\"g\").attr(\"class\", \"water\");\n    this.context.append(\"g\").attr(\"class\", \"land\").append(\"path\").attr(\"id\", \"context-land-path\").attr(\"clip-path\", \"url(#clip)\");\n    this.context.append(\"g\").attr(\"id\", \"locations\");\n    this.mouseoverlay = this.svg.append(\"rect\").attr(\"id\", \"mouseoverlay\");\n    this.data = void 0;\n    this.metadata = void 0;\n    this.year = 0;\n    this.setSizes();\n    d3.select(window).on(\"resize\", this.setSizes.bind(this));\n  }\n\n  LinePlotter.prototype.setSizes = function() {\n    this.width = this.img.width();\n    this.height = this.img.height();\n    this.svg.attr(\"width\", this.width);\n    this.svg.attr(\"height\", this.height);\n    this.heightFocusBox = this.padding2.top - this.padding.bottom;\n    this.heightContextBox = this.height - this.padding2.top - this.padding2.bottom;\n    this.widthFocusBox = this.width - this.padding.left - this.padding.right;\n    this.widthContextBox = this.width - this.padding2.left - this.padding2.right;\n    this.svg.select('#clip rect').attr(\"width\", this.widthFocusBox).attr(\"height\", this.heightFocusBox);\n    this.mouseoverlay.attr(\"transform\", \"translate(\" + this.padding.left + \",\" + this.padding.top + \")\").attr(\"width\", this.widthFocusBox).attr(\"height\", this.heightFocusBox);\n    this.focus.select('.axis.x').attr(\"transform\", \"translate(0 ,\" + this.heightFocusBox + \")\");\n    this.context.select('.axis.x').attr(\"transform\", \"translate(0 ,\" + this.heightContextBox + \")\");\n    if ((this.data != null) && (this.metadata != null)) {\n      return this.draw();\n    }\n  };\n\n  LinePlotter.prototype.adjustScales = function(maxX, maxY, minX, minY) {\n    this.xScaleFocus = d3.scale.linear().domain([minX, maxX]).range([0, this.widthFocusBox]);\n    this.xScaleContext = d3.scale.linear().domain([minX, maxX]).range([0, this.widthContextBox]);\n    this.yScaleFocus = d3.scale.linear().domain([minY, maxY]).range([this.heightFocusBox, 0]);\n    this.yScaleContext = d3.scale.linear().domain([minY, maxY]).range([this.heightContextBox, 0]);\n    this.brush = d3.svg.brush();\n    this.brush.x(this.xScaleContext).on(\"brush\", this.brushed);\n    this.context.select('.brush.x').remove();\n    return this.context.append(\"g\").attr(\"class\", \"x brush\").call(this.brush).selectAll(\"rect\").attr(\"y\", -6).attr(\"height\", this.height - this.padding2.top - this.padding2.bottom + 7);\n  };\n\n  LinePlotter.prototype.brushed = function() {\n    if (this.brush.empty()) {\n      this.xScaleFocus.domain(this.xScaleContext.domain());\n    } else {\n      this.xScaleFocus.domain(this.brush.extent());\n    }\n    this.focus.select(\".land path\").attr(\"d\", this.areaFocus);\n    return this.xAxisSVG.call(this.xAxisFocus);\n  };\n\n  LinePlotter.prototype.convertToDegrees = function(d) {\n    return this.projection.invert([d, this.data.data[0].lat]);\n  };\n\n  LinePlotter.prototype.plot = function(data1, metadata) {\n    this.data = data1;\n    this.metadata = metadata;\n    return this.draw();\n  };\n\n  LinePlotter.prototype.draw = function() {\n    var areaContext, cityX, data, xAxisContext, xMax, xMin, yAxis, yMax, yMin;\n    data = this.data.data;\n    xMin = this.projection(this.metadata.geometry.coordinates[0])[0];\n    xMax = d3.max(data, (function(_this) {\n      return function(d) {\n        return _this.projection([d.long, d.lat])[0];\n      };\n    })(this));\n    yMax = d3.max(data, (function(_this) {\n      return function(d) {\n        return d.height;\n      };\n    })(this));\n    yMin = -13;\n    this.adjustScales(xMax, yMax, xMin, yMin);\n    cityX = (this.projection(this.metadata.properties.location)[0]);\n    this.areaFocus = d3.svg.area().x((function(_this) {\n      return function(d) {\n        return _this.xScaleFocus(_this.projection([d.long, d.lat])[0]);\n      };\n    })(this)).y0(this.heightFocusBox).y1((function(_this) {\n      return function(d) {\n        return _this.yScaleFocus(d.height);\n      };\n    })(this));\n    areaContext = d3.svg.area().x((function(_this) {\n      return function(d) {\n        return _this.xScaleContext(_this.projection([d.long, d.lat])[0]);\n      };\n    })(this)).y0(this.heightContextBox).y1((function(_this) {\n      return function(d) {\n        return _this.yScaleContext(d.height);\n      };\n    })(this));\n    yAxis = d3.svg.axis().scale(this.yScaleFocus).orient(\"left\").ticks(5);\n    this.xAxisFocus = d3.svg.axis().scale(this.xScaleFocus).orient(\"bottom\").tickFormat((function(_this) {\n      return function(d) {\n        return d3.round(_this.convertToDegrees(d)[0], 2) + \"°\";\n      };\n    })(this)).ticks(5);\n    xAxisContext = d3.svg.axis().scale(this.xScaleContext).orient(\"bottom\").ticks(1).tickValues([xMin, cityX, xMax]).tickFormat((function(_this) {\n      return function(d) {\n        return d3.round(_this.convertToDegrees(d)[0], 2) + \"°\";\n      };\n    })(this));\n    this.focus.select(\".axis.y\").call(yAxis);\n    this.xAxisSVG = this.focus.select(\".axis.x\").call(this.xAxisFocus);\n    this.context.select('.axis.x').call(xAxisContext);\n    this.plotSealevel(xMin, xMax);\n    d3.select('#focus-land-path').datum(data).attr(\"d\", this.areaFocus);\n    d3.select('#context-land-path').datum(data).attr(\"d\", areaContext);\n    this.context.select(\"#locations\").remove();\n    return this.context.append(\"g\").attr('id', 'locations').attr(\"transform\", \"translate(\" + this.xScaleFocus(cityX) + \", \" + (this.heightContextBox + this.padding2.bottom) + \")\").append('text').attr(\"text-anchor\", \"middle\").text(this.metadata.properties.name);\n  };\n\n  LinePlotter.prototype.plotSealevel = function(xMinSeaLevel, xMaxSeaLevel) {\n    this.xMinSeaLevel = xMinSeaLevel;\n    this.xMaxSeaLevel = xMaxSeaLevel;\n    return this.drawSeaLevel();\n  };\n\n  LinePlotter.prototype.drawSeaLevel = function() {\n    var areaNowContext, areaNowFocus, baseSeaLevel, data;\n    baseSeaLevel = 0;\n    data = [\n      {\n        x: this.xMinSeaLevel,\n        y: baseSeaLevel\n      }, {\n        x: this.xMaxSeaLevel,\n        y: baseSeaLevel\n      }\n    ];\n    this.waterFocus.selectAll(\"path\").remove();\n    this.waterContext.selectAll(\"path\").remove();\n    areaNowFocus = d3.svg.area().x((function(_this) {\n      return function(d) {\n        return _this.xScaleFocus(d.x);\n      };\n    })(this)).y0(this.heightFocusBox).y1((function(_this) {\n      return function(d) {\n        return _this.yScaleFocus(d.y);\n      };\n    })(this));\n    areaNowContext = d3.svg.area().x((function(_this) {\n      return function(d) {\n        return _this.xScaleContext(d.x);\n      };\n    })(this)).y0(this.heightContextBox).y1((function(_this) {\n      return function(d) {\n        return _this.yScaleContext(d.y);\n      };\n    })(this));\n    this.waterFocus.append(\"path\").datum(data).attr(\"class\", \"waterarea\").attr(\"d\", areaNowFocus).attr(\"clip-path\", \"url(#clip)\");\n    return this.waterContext.append(\"path\").datum(data).attr(\"class\", \"waterarea\").attr(\"d\", areaNowContext).attr(\"clip-path\", \"url(#clip)\");\n  };\n\n  return LinePlotter;\n\n})();\n\nrange = function(start, stop, elements, baseL, projL) {\n  var a, b, step;\n  a = [\n    {\n      x: start,\n      base: baseL,\n      proj: projL\n    }\n  ];\n  b = start;\n  step = (stop - start) / elements;\n  while (b < stop) {\n    b += step;\n    a.push({\n      x: b,\n      base: baseL,\n      proj: projL\n    });\n  }\n  return a;\n};\n"]}